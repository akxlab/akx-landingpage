{
  "version": 3,
  "sources": ["../../node_modules/@web3-onboard/core/dist/index.js", "../../node_modules/@web3-onboard/vue/dist/index.js"],
  "sourcesContent": ["import '@web3-onboard/common';\nexport { as as default } from './index-7c2d1c8f.js';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport 'bowser';\nimport 'svelte-i18n';\nimport 'nanoid';\nimport 'joi';\nimport 'bignumber.js';\nimport 'svelte/store';\nimport 'lodash.partition';\nimport 'ethers';\nimport '@unstoppabledomains/resolution';\nimport 'lodash.merge';\nimport 'eventemitter3';\n", "import Web3Onboard from '@web3-onboard/core';\n// We use vue-demi to automatically use the correct reactivity API for both Vue 2 and Vue 3\nimport { ref, computed, readonly, shallowRef } from 'vue-demi';\n// Vueuse helper to use the localstorage as a reactive variable\nimport { useStorage } from '@vueuse/core';\n// Vueuse helper to streamline the use of rxjs observables as vue refs\nimport { useSubscription } from '@vueuse/rxjs';\n// Onboard will be kept here to be reused every time that we access the composable\nlet web3Onboard = null;\n// Useful data about the previously connected wallets that will synced with the localstorage\nconst alreadyConnectedWallets = useStorage('alreadyConnectedWallets', []);\nconst lastConnectionTimestamp = useStorage('lastWalletConnectionTimestamp', 0);\n// We store the internal onboard state as a shallowRef to have reactivity but with a smaller computational cost compared to a full ref\n// Because it is shallow, we must update it every time replacing the entire object\nconst onboardState = shallowRef({});\nconst updateAlreadyConnectedWallets = () => {\n    alreadyConnectedWallets.value = onboardState.value.wallets.map((w) => w.label);\n};\nconst init = (options) => {\n    web3Onboard = Web3Onboard(options);\n    onboardState.value = web3Onboard.state.get();\n    // To avoid memory leaks, we use only one rxjs subscription to update the internal onboard state\n    // This subscription will be automatically destroyed when the context is destroyed\n    useSubscription(web3Onboard.state.select().subscribe(update => {\n        onboardState.value = update;\n        updateAlreadyConnectedWallets();\n    }));\n    return web3Onboard;\n};\nconst useOnboard = () => {\n    // Raise an error if init() wasn't called\n    if (!web3Onboard) {\n        throw new Error('web3Onboard is not initialized');\n    }\n    // Wallet related functions and variables\n    const connectingWallet = ref(false);\n    const wallets = computed(() => onboardState.value.wallets);\n    const connectedWallet = computed(() => wallets.value.length > 0 ? wallets.value[0] : null);\n    const connectWallet = async (options) => {\n        connectingWallet.value = true;\n        await web3Onboard.connectWallet(options);\n        lastConnectionTimestamp.value = Date.now();\n        connectingWallet.value = false;\n    };\n    const disconnectWallet = async (wallet) => {\n        connectingWallet.value = true;\n        await web3Onboard.disconnectWallet(wallet);\n        updateAlreadyConnectedWallets();\n        connectingWallet.value = false;\n    };\n    const disconnectConnectedWallet = async () => {\n        if (connectedWallet.value) {\n            await disconnectWallet({ label: connectedWallet.value.label });\n        }\n    };\n    // Chain related functions and variables\n    const settingChain = ref(false);\n    const connectedChain = computed(() => (connectedWallet &&\n        connectedWallet.value &&\n        connectedWallet.value.chains[0]) ||\n        null);\n    const getChain = (walletLabel) => {\n        const wallet = onboardState.value.wallets.find((w) => w.label === walletLabel);\n        return (wallet && wallet.chains[0]) || null;\n    };\n    const setChain = async (options) => {\n        settingChain.value = true;\n        await web3Onboard.setChain(options);\n        settingChain.value = false;\n    };\n    return {\n        alreadyConnectedWallets,\n        connectWallet,\n        connectedChain,\n        connectedWallet,\n        connectingWallet: readonly(connectingWallet),\n        disconnectConnectedWallet,\n        disconnectWallet,\n        getChain,\n        lastConnectionTimestamp,\n        setChain,\n        settingChain: readonly(settingChain),\n        wallets\n    };\n};\nexport { init, useOnboard };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAOA,iBAAO;AAGP,oBAAO;AAEP,wBAAO;AACP,IAAAA,iBAAO;AACP,2BAAO;;;ACZP,SAAS,KAAK,UAAU,UAAU,kBAAkB;AAEpD,SAAS,kBAAkB;AAE3B,SAAS,uBAAuB;AAEhC,IAAI,cAAc;AAElB,IAAM,0BAA0B,WAAW,2BAA2B,CAAC,CAAC;AACxE,IAAM,0BAA0B,WAAW,iCAAiC,CAAC;AAG7E,IAAM,eAAe,WAAW,CAAC,CAAC;AAClC,IAAM,gCAAgC,MAAM;AACxC,0BAAwB,QAAQ,aAAa,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,KAAK;AACjF;AACA,IAAMC,QAAO,CAAC,YAAY;AACtB,gBAAc,KAAY,OAAO;AACjC,eAAa,QAAQ,YAAY,MAAM,IAAI;AAG3C,kBAAgB,YAAY,MAAM,OAAO,EAAE,UAAU,YAAU;AAC3D,iBAAa,QAAQ;AACrB,kCAA8B;AAAA,EAClC,CAAC,CAAC;AACF,SAAO;AACX;AACA,IAAM,aAAa,MAAM;AAErB,MAAI,CAAC,aAAa;AACd,UAAM,IAAI,MAAM,gCAAgC;AAAA,EACpD;AAEA,QAAM,mBAAmB,IAAI,KAAK;AAClC,QAAM,UAAU,SAAS,MAAM,aAAa,MAAM,OAAO;AACzD,QAAM,kBAAkB,SAAS,MAAM,QAAQ,MAAM,SAAS,IAAI,QAAQ,MAAM,CAAC,IAAI,IAAI;AACzF,QAAM,gBAAgB,OAAO,YAAY;AACrC,qBAAiB,QAAQ;AACzB,UAAM,YAAY,cAAc,OAAO;AACvC,4BAAwB,QAAQ,KAAK,IAAI;AACzC,qBAAiB,QAAQ;AAAA,EAC7B;AACA,QAAM,mBAAmB,OAAO,WAAW;AACvC,qBAAiB,QAAQ;AACzB,UAAM,YAAY,iBAAiB,MAAM;AACzC,kCAA8B;AAC9B,qBAAiB,QAAQ;AAAA,EAC7B;AACA,QAAM,4BAA4B,YAAY;AAC1C,QAAI,gBAAgB,OAAO;AACvB,YAAM,iBAAiB,EAAE,OAAO,gBAAgB,MAAM,MAAM,CAAC;AAAA,IACjE;AAAA,EACJ;AAEA,QAAM,eAAe,IAAI,KAAK;AAC9B,QAAM,iBAAiB,SAAS,MAAO,mBACnC,gBAAgB,SAChB,gBAAgB,MAAM,OAAO,CAAC,KAC9B,IAAI;AACR,QAAM,WAAW,CAAC,gBAAgB;AAC9B,UAAM,SAAS,aAAa,MAAM,QAAQ,KAAK,CAAC,MAAM,EAAE,UAAU,WAAW;AAC7E,WAAQ,UAAU,OAAO,OAAO,CAAC,KAAM;AAAA,EAC3C;AACA,QAAM,WAAW,OAAO,YAAY;AAChC,iBAAa,QAAQ;AACrB,UAAM,YAAY,SAAS,OAAO;AAClC,iBAAa,QAAQ;AAAA,EACzB;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,kBAAkB,SAAS,gBAAgB;AAAA,IAC3C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAc,SAAS,YAAY;AAAA,IACnC;AAAA,EACJ;AACJ;",
  "names": ["import_lodash", "init"]
}
