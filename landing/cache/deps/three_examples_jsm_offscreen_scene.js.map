{
  "version": 3,
  "sources": ["../../node_modules/three/examples/jsm/offscreen/scene.js"],
  "sourcesContent": ["import * as THREE from 'three';\n\nvar camera, scene, renderer, group;\n\nfunction init( canvas, width, height, pixelRatio, path ) {\n\n\tcamera = new THREE.PerspectiveCamera( 40, width / height, 1, 1000 );\n\tcamera.position.z = 200;\n\n\tscene = new THREE.Scene();\n\tscene.fog = new THREE.Fog( 0x444466, 100, 400 );\n\tscene.background = new THREE.Color( 0x444466 );\n\n\tgroup = new THREE.Group();\n\tscene.add( group );\n\n\t// we don't use ImageLoader since it has a DOM dependency (HTML5 image element)\n\n\tvar loader = new THREE.ImageBitmapLoader().setPath( path );\n\tloader.setOptions( { imageOrientation: 'flipY' } );\n\tloader.load( 'textures/matcaps/matcap-porcelain-white.jpg', function ( imageBitmap ) {\n\n\t\tvar texture = new THREE.CanvasTexture( imageBitmap );\n\n\t\tvar geometry = new THREE.IcosahedronGeometry( 5, 8 );\n\t\tvar materials = [\n\t\t\tnew THREE.MeshMatcapMaterial( { color: 0xaa24df, matcap: texture } ),\n\t\t\tnew THREE.MeshMatcapMaterial( { color: 0x605d90, matcap: texture } ),\n\t\t\tnew THREE.MeshMatcapMaterial( { color: 0xe04a3f, matcap: texture } ),\n\t\t\tnew THREE.MeshMatcapMaterial( { color: 0xe30456, matcap: texture } )\n\t\t];\n\n\t\tfor ( var i = 0; i < 100; i ++ ) {\n\n\t\t\tvar material = materials[ i % materials.length ];\n\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\t\t\tmesh.position.x = random() * 200 - 100;\n\t\t\tmesh.position.y = random() * 200 - 100;\n\t\t\tmesh.position.z = random() * 200 - 100;\n\t\t\tmesh.scale.setScalar( random() + 1 );\n\t\t\tgroup.add( mesh );\n\n\t\t}\n\n\t\trenderer = new THREE.WebGLRenderer( { antialias: true, canvas: canvas } );\n\t\trenderer.setPixelRatio( pixelRatio );\n\t\trenderer.setSize( width, height, false );\n\n\t\tanimate();\n\n\t} );\n\n}\n\nfunction animate() {\n\n\t// group.rotation.x = Date.now() / 4000;\n\tgroup.rotation.y = - Date.now() / 4000;\n\n\trenderer.render( scene, camera );\n\n\tif ( self.requestAnimationFrame ) {\n\n\t\tself.requestAnimationFrame( animate );\n\n\t} else {\n\n\t\t// Firefox\n\n\t}\n\n}\n\n// PRNG\n\nvar seed = 1;\n\nfunction random() {\n\n\tvar x = Math.sin( seed ++ ) * 10000;\n\n\treturn x - Math.floor( x );\n\n}\n\nexport default init;\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAEA,IAAI;AAAJ,IAAY;AAAZ,IAAmB;AAAnB,IAA6B;AAE7B,SAAS,KAAM,QAAQ,OAAO,QAAQ,YAAY,MAAO;AAExD,WAAS,IAAU,kBAAmB,IAAI,QAAQ,QAAQ,GAAG,GAAK;AAClE,SAAO,SAAS,IAAI;AAEpB,UAAQ,IAAU,MAAM;AACxB,QAAM,MAAM,IAAU,IAAK,SAAU,KAAK,GAAI;AAC9C,QAAM,aAAa,IAAU,MAAO,OAAS;AAE7C,UAAQ,IAAU,MAAM;AACxB,QAAM,IAAK,KAAM;AAIjB,MAAI,SAAS,IAAU,kBAAkB,EAAE,QAAS,IAAK;AACzD,SAAO,WAAY,EAAE,kBAAkB,QAAQ,CAAE;AACjD,SAAO,KAAM,+CAA+C,SAAW,aAAc;AAEpF,QAAI,UAAU,IAAU,cAAe,WAAY;AAEnD,QAAI,WAAW,IAAU,oBAAqB,GAAG,CAAE;AACnD,QAAI,YAAY;AAAA,MACf,IAAU,mBAAoB,EAAE,OAAO,UAAU,QAAQ,QAAQ,CAAE;AAAA,MACnE,IAAU,mBAAoB,EAAE,OAAO,SAAU,QAAQ,QAAQ,CAAE;AAAA,MACnE,IAAU,mBAAoB,EAAE,OAAO,UAAU,QAAQ,QAAQ,CAAE;AAAA,MACnE,IAAU,mBAAoB,EAAE,OAAO,UAAU,QAAQ,QAAQ,CAAE;AAAA,IACpE;AAEA,aAAU,IAAI,GAAG,IAAI,KAAK,KAAO;AAEhC,UAAI,WAAW,UAAW,IAAI,UAAU;AACxC,UAAI,OAAO,IAAU,KAAM,UAAU,QAAS;AAC9C,WAAK,SAAS,IAAI,OAAO,IAAI,MAAM;AACnC,WAAK,SAAS,IAAI,OAAO,IAAI,MAAM;AACnC,WAAK,SAAS,IAAI,OAAO,IAAI,MAAM;AACnC,WAAK,MAAM,UAAW,OAAO,IAAI,CAAE;AACnC,YAAM,IAAK,IAAK;AAAA,IAEjB;AAEA,eAAW,IAAU,cAAe,EAAE,WAAW,MAAM,OAAe,CAAE;AACxE,aAAS,cAAe,UAAW;AACnC,aAAS,QAAS,OAAO,QAAQ,KAAM;AAEvC,YAAQ;AAAA,EAET,CAAE;AAEH;AAEA,SAAS,UAAU;AAGlB,QAAM,SAAS,IAAI,CAAE,KAAK,IAAI,IAAI;AAElC,WAAS,OAAQ,OAAO,MAAO;AAE/B,MAAK,KAAK,uBAAwB;AAEjC,SAAK,sBAAuB,OAAQ;AAAA,EAErC,OAAO;AAAA,EAIP;AAED;AAIA,IAAI,OAAO;AAEX,SAAS,SAAS;AAEjB,MAAI,IAAI,KAAK,IAAK,MAAQ,IAAI;AAE9B,SAAO,IAAI,KAAK,MAAO,CAAE;AAE1B;AAEA,IAAO,gBAAQ;",
  "names": []
}
